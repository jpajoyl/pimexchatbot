require("dotenv").config();
const {Router} = require('express');
const axios = require('axios');
const router = Router();
const Dialogflow = require("@google-cloud/dialogflow");
const {v4: uuid} = require('uuid');
const Path = require("path");
const fs = require('fs');

const {NlpManager} = require('node-nlp');
const {getConnection} = require('../database');
const {createBaseModel} = require('../BaseModels/baseModel')

router.post('/pimex-model', async (req, res) => {
    const manager = new NlpManager({languages: ['es'], forceNER: true, ner: {useDuckling: true}});
// intent de bienvenida
    manager.addDocument('es', 'oe', 'welcome.intent');
    manager.addDocument('es', 'hola que tal', 'welcome.intent');
    manager.addDocument('es', 'buenas', 'welcome.intent');
    manager.addDocument('es', 'buenos dias', 'welcome.intent');
    manager.addDocument('es', 'hola', 'welcome.intent');
// respuestas
    manager.addAnswer('es', 'welcome.intent',
        '!Hola, bienvenido a PimexBot! Aqui podrás conocer las principales funcionalidades ' +
        'de pimex y resolver algunas de las dudas que te puedan surgir durante su uso, si en algún momento ' +
        'deseas comunicarte con un asesor escribe la palabra "Asesor" y te pediremos algunos datos para que uno de nuestros ' +
        'asesores se comunique contigo lo más rápido posible.\n' +
        '¿Que deseas hacer?');

    // intent de despedida
    manager.addDocument('es', 'Gracias', 'bye.intent');
    manager.addDocument('es', 'Adiós', 'bye.intent');
    manager.addDocument('es', 'hasta luego', 'bye.intent');
    manager.addDocument('es', 'Espero su llamada', 'bye.intent');
    manager.addDocument('es', 'Hasta la próxima', 'bye.intent');
    manager.addDocument('es', 'Chao', 'bye.intent');
    manager.addDocument('es', 'Espero que se comuniquen conmigo pronto', 'bye.intent');

    manager.addAnswer('es', 'bye.intent',
        'Fue un placer hablar contigo, ¡Adiós!');

// asesor
    manager.addDocument('es', 'Asesor', 'asesor.intent');
    manager.addDocument('es', 'quiero comunicarme con un asesor', 'asesor.intent');
    manager.addDocument('es', 'quiero hablar con alguien', 'asesor.intent');
    manager.addDocument('es', 'necesito comunicarme con una persona', 'asesor.intent');

    manager.addAnswer('es', 'asesor.intent',
        'Te podemos ayudar con eso. Solo necesito un poco de información para empezar, ' +
        'empecemos con tu nombre. ¿Cuál es tu nombre completo? (Digita únicamente tu nombre)');

// que puede hacer pimex?
    manager.addDocument('es', 'que puede hacer pimex?', 'what.intent');
    manager.addDocument('es', '¿Qué es Pimex?', 'what.intent');
    manager.addDocument('es', 'que hacen?', 'what.intent');
    manager.addDocument('es', '¿Para qué sirve Pimex?', 'what.intent');

    manager.addAnswer('es', 'what.intent',
        'Pimex es un software que te permite organizar a tus clientes potenciales y reales ' +
        'de manera rápida y sencilla para que puedas monetizar tus esfuerzos marketing y ventas con ' +
        'resultados poderosos. Para conocer más de Pimex mira este video: <a href="https://www.youtube.com/watch?v=yOq1CkfXogw">¿Que es Pimex?</a>');
    manager.addAnswer('es', 'what.intent',
        'Pimex es una aplicación web, que te ayuda almacenando y organizando los clientes ' +
        'potenciales obtenidos desde tus campañas de marketing digital.\n' +
        'Pimex es muy fácil de usar, solo tienes que instalarlo en tu sitio web y el hará seguimiento ' +
        'de todos los formularios de contacto de este, para que estés al tanto de tus clientes potenciales. ' +
        'Para conocer más de Pimex mira este video: <a href="https://www.youtube.com/watch?v=yOq1CkfXogw">¿Que es Pimex?</a>');

    manager.addAnswer('es', 'what.intent',
        'Pimex es una herramienta para organizar y gestionar los clientes potenciales ' +
        'que puedas generar a través de cualquier formulario de contacto que tengas disponible ' +
        'en la web. Es como centralizar toda la información en un solo lugar con información ' +
        'relevante para tomar decisiones más inteligentes a la hora de invertir tus presupuestos.' +
        'Para conocer más de Pimex mira este video: <a href="https://www.youtube.com/watch?v=yOq1CkfXogw">¿Que es Pimex?</a>');


// tarifa
    manager.addDocument('es', 'cuánto cuesta?', 'fee.intent');
    manager.addDocument('es', 'que valor tiene?', 'fee.intent');
    manager.addDocument('es', '¿Qué precio tiene utilizar Pimex?', 'fee.intent');
    manager.addDocument('es', 'Precio de Pimex', 'fee.intent');
    manager.addDocument('es', '¿Qué costo tiene utilizarlo?', 'fee.intent');
    manager.addDocument('es', '¿Qué costo tiene?', 'fee.intent');
    manager.addDocument('es', '¿Cuánto vale Pimex?', 'fee.intent');
    manager.addDocument('es', 'Precio para utilizarlo', 'fee.intent');

    manager.addAnswer('es', 'fee.intent',
        'En Pimex te ofrecemos 3 planes, ya escoges cual es el perfecto para tu negocio:\n' +
        'Gratis\n' +
        'Pimex plus, tiene un costo mensual de 35 USD\n' +
        'Pimex enterprise, tiene un costo desde 145 USD mensual\n' +
        'Conoce nuestros planes en: <a href="https://es.pimex.co/precio/">Planes</a>');

    manager.addDocument('es', '¿Cómo agregar a mi equipo de trabajo a los tableros?', 'add-team.intent');
    manager.addDocument('es', '¿Cómo agrego a más personas al tablero?', 'add-team.intent');
    manager.addDocument('es', 'Pasos para agregar a mi equipo al tablero', 'add-team.intent');
    manager.addDocument('es', '¿Cómo agregar usuarios?', 'add-team.intent');

    manager.addAnswer('es', 'add-team.intent',
        '1. Inicia sesión\n' +
        '2. Ve a tu tablero\n' +
        '3. En la columna de la izquierda ve a la opción "Usuarios"\n' +
        '4. Justo debajo de la lista de usuarios vas a ver un campo que dice email. Agrega ahí el email de la persona a la que quieras agregar.\n' +
        '5. Dale click al botón "Agregar usuario".\n' +
        'Listo, ahora un mail de confirmación le llegará a esta persona. Tu invitado solo tiene que registrarse en Pimex y comenzará a ver tu tablero de inmediato.\n');

    manager.addDocument('es', '¿Cómo exportar mis leads a un excel?', 'excel-leads.intent');
    manager.addDocument('es', 'Se puede exportar los leads a un excel', 'excel-leads.intent');
    manager.addDocument('es', 'Se puede exportar a los clientes en un excel', 'excel-leads.intent');

    manager.addAnswer('es', 'excel-leads.intent',
        'En Pimex podrás exportar tus leads o clientes potenciales a tus tableros, en el siguiente ' +
        'video podrás conocer más sobre este tema: <a href="https://www.youtube.com/watch?v=-vBv_oovamQ&list=PLlegCSvynNQdG2xUEMIlj5TQR1rU5Va1k&index=2&t=758s">Exportar a excel</a>');

    manager.addDocument('es', '¿Cómo funcionan los tableros?', 'boards.intent');
    manager.addDocument('es', 'Explicación de funcionamiento de los tableros de Pimex', 'boards.intent');

    manager.addAnswer('es', 'boards.intent',
        'Si deseas ver la explicación completa de el funcionamiento de pimex, tesugerimos que ingreses al siguiente video ' +
        'en donde te explicamos cada una de las funcionalidades de éste: <a href="https://www.youtube.com/watch?v=-vBv_oovamQ">¿Cómo funcionan los tableros?</a>');

    manager.addDocument('es', 'No puedo acceder a mi cuenta, ¿qué debo hacer?', 'login-fail.intent');
    manager.addDocument('es', 'tenemos problemas con la aplicación y no deja ingresar', 'login-fail.intent');
    manager.addDocument('es', 'No me deja ingresar', 'login-fail.intent');

    manager.addAnswer('es', 'login-fail.intent',
        'Bien, para comenzar debes dirigirte a <a href="https://app.pimex.co/signin">Signin</a> y dar clic en la opción “Olvidé mi contraseña”' +
        '. Después de seguir las instrucciones que se envían a tu correo electrónico podrás intentarlo nuevamente.');

    manager.addDocument('es', 'Necesito la exportar la factura', 'billing-export.intent');
    manager.addDocument('es', '¿Cómo puedo exportar mi factura?', 'billing-export.intent');

    manager.addAnswer('es', 'billing-export.intent',
        'Pimex solo generará tu factura una vez hayan pasado los 14 días de prueba que te regalamos para que disfrutes ' +
        'de nuestro servicio. Si no has superado este tiempo, deberás esperar a que el periodo de prueba finalice. Una vez hayan ' +
        'transcurrido estos 14 días podrás acceder a la sección de “Mi suscripción” y allí encontrarás todo lo relacionado a tu plan y facturación.');
    await manager.train();
    manager.save(`src/models/pimex-model.nlp`);
    res.status(200).send('EVENT_RECEIVED');
});
// Creates the endpoint for our webhook
router.post('/webhook', (req, res) => {

    let body = req.body;
    console.log(body);
    // Checks this is an event from a page subscription
    if (body.object === 'page') {

        // Iterates over each entry - there may be multiple if batched
        body.entry.forEach(function (entry) {

            // Gets the message. entry.messaging is an array, but
            // will only ever contain one message, so we get index 0
            let webhook_event = entry.messaging[0];
            console.log(webhook_event);
        });

        // Returns a '200 OK' response to all requests
        res.status(200).send('EVENT_RECEIVED');
    } else {
        // Returns a '404 Not Found' if event is not from a page subscription
        res.sendStatus(404);
    }

});

// Adds support for GET requests to our webhook
router.get('/webhook', (req, res) => {

    // Your verify token. Should be a random string.
    let VERIFY_TOKEN = "pimexChat";

    // Parse the query params
    let mode = req.query['hub.mode'];
    let token = req.query['hub.verify_token'];
    let challenge = req.query['hub.challenge'];

    // Checks if a token and mode is in the query string of the request
    if (mode && token) {

        // Checks the mode and token sent is correct
        if (mode === 'subscribe' && token === VERIFY_TOKEN) {

            // Responds with the challenge token from the request
            console.log('WEBHOOK_VERIFIED');
            res.status(200).send(challenge);

        } else {
            // Responds with '403 Forbidden' if verify tokens do not match
            res.sendStatus(403);
        }
    }
});

router.get('/', async (req, res) => {
    await res.json({
        'msg': 'Api de chatbot'
    })
})

router.post('/base-model', ((req, res) => {
    const manager = new NlpManager({languages: ['es'], forceNER: true, ner: {useDuckling: true}});
    // welcome intent
    manager.addDocument('es', 'oe', 'welcome.intent');
    manager.addDocument('es', 'hola que tal', 'welcome.intent');
    manager.addDocument('es', 'buenas', 'welcome.intent');
    manager.addDocument('es', 'buenos dias', 'welcome.intent');
    manager.addDocument('es', 'hola', 'welcome.intent');
    // respuestas
    manager.addAnswer('es', 'welcome.intent', '!Hola, bienvenido a Pimex! ¿Te gustaría saber lo que nuestro servicio puede hacer por ti?');

    // services yes intent
    manager.addDocument('es', 'esta bien', 'services.yes');
    manager.addDocument('es', 'por supuesto', 'services.yes');
    manager.addDocument('es', 'claro', 'services.yes');
    manager.addDocument('es', 'si', 'services.yes');

    manager.addAnswer('es', 'services.yes', 'Te podemos ayudar con eso. Solo necesito un poco de información para empezar, empecemos con tu nombre. ¿Cuál es tu nombre completo? (Digita únicamente tu nombre)');

    // get.name intent
    manager.addDocument('es', 'Juan Manuel Pajoy Lopez', 'get.name');
    manager.addDocument('es', 'me llamo javier cuevas', 'get.name');
    manager.addDocument('es', 'mi nombre es carlos', 'get.name');
    manager.addDocument('es', 'Alberto', 'get.name');

    manager.addAnswer('es', 'get.name', 'Por favor dinos tu dirección de correo electrónico para que podamos contactarte');

    // get.email intent
    manager.addDocument('es', 'mi correo es jpajoy@pimex.co', 'get.email');
    manager.addDocument('es', 'es juan@gmail.com', 'get.email');
    manager.addDocument('es', 'hola@test.com.co', 'get.email');

    manager.addAnswer('es', 'get.email', 'Y por último danos tu número de telefono para tener una mejor conversación(Sin espacios ni guones)');


    // get.phone
    manager.addDocument('es', 'es 2295698', 'get.phone');
    manager.addDocument('es', '325685459', 'get.phone');

    manager.addAnswer('es', 'get.phone', 'Gracias. Nuestro equipo se pondrá en contacto contigo pronto.');
    (async () => {
        await manager.train();
        manager.save(`src/models/base-model.nlp`);
    })();
    res.status(200).send({
        'message': 'correct'
    })
}));

router.post('/add-button', async (req, res) => {
    const {question} = req.body;
    const {id} = req.body;
    const utteranceList = getConnection().get('button').value()[id];
    if (utteranceList === undefined) {
        getConnection().set('button.' + id, []).write();
    }
    getConnection().get('button.' + id).push({
        id: uuid(),
        message: question
    }).write();
    res.status(200).send({
        'result': 'correct'
    });
})
router.delete('/delete-button/:id/:buttonId', async (req, res) => {
    const {id} = req.params;
    const {buttonId} = req.params;
    getConnection().get('button.' + id).remove({id: buttonId}).write();
    res.status(200).send({
        'result': 'deleted'
    });
})
router.get('/get-button/:id', async (req, res) => {
    const {id} = req.params;
    const buttons = getConnection().get('button.' + id).value();
    res.status(200).send({
        'buttons': buttons
    });
})


router.post('/nlp-test', async (req, res) => {
    const {message} = req.body;
    const {id} = req.body;
    let manager = new NlpManager({languages: ['es'], forceNER: true});
    manager.load(`src/models/${id.toString()}.nlp`);

    const nlpResponse = await manager.process('es', message);

    if (nlpResponse.intent === 'None') {
        nlpResponse.answer = 'Aún estoy aprendiendo a hablar como un humano, ¿Podrías repetirme lo que acabas de decir?';
    }
    if (req.session.currentIntent === 'asesor.intent') {
        req.session.name = message;
        nlpResponse.answer = 'Por favor dinos tu dirección de correo electrónico para que podamos contactarte';
        nlpResponse.intent = 'get.name'
    }
    if (nlpResponse.entities[0]) {
        for (let i = 0; i < nlpResponse.entities.length; i++) {
            if (nlpResponse.entities[i].entity === 'email') {
                req.session.email = nlpResponse.entities[i].resolution.value
                nlpResponse.answer = 'Y por último danos tu número de telefono para tener una mejor conversación (Sin espacios ni guones)';
            } else if (nlpResponse.entities[i].entity === 'phonenumber') {
                req.session.phonenumber = nlpResponse.entities[i].resolution.value;
                req.session.end = true;
                nlpResponse.answer = 'Gracias. Nuestro equipo se pondrá en contacto contigo pronto.';
            }
        }
    }
    req.session.currentIntent = nlpResponse.intent;
    // guardar respuestas en json
    const newUtterance = {
        intent: nlpResponse.intent,
        message: message
    }
    const utteranceList = getConnection().get('utterance').value()[id];
    if (utteranceList === undefined) {
        getConnection().set('utterance.' + id, []).write();
    }
    getConnection().get('utterance.' + id).push(newUtterance).write();
    if (req.session.end) {
        const LeadDta = {
            _state: "lead",
            email: req.session.email,
            name: req.session.name,
            origin: "Chat",
            phone: req.session.phonenumber,
            project: id,
            referrer: "test"
        }
        await axios.post('https://api.pimex.io/v2/conversions/', LeadDta);
    }
    res.status(200).send({
        'answer': nlpResponse.answer
    });
});


router.post('/create-faq', async (req, res) => {
    const {id} = req.body;
    const {companyName} = req.body;
    if (fs.existsSync(`src/models/${id.toString()}.nlp`)) {
        res.status(200).send({
            'message': 'Already exist'
        });
    } else {
        const manager = createBaseModel(companyName);
        await manager.train();
        manager.save(`src/models/${id.toString()}.nlp`);
        res.status(201).send({
            'message': 'successful faq created'
        });
    }
});

router.post('/add-faq-questions', async (req, res) => {
    const {id} = req.body;
    const {trainingPhrases} = req.body;
    const {intent} = req.body;
    let manager = new NlpManager();
    manager.load(`src/models/${id.toString()}.nlp`);
    for (let i = 0; i < trainingPhrases.length; i++) {
        manager.addDocument('es', trainingPhrases[i], intent);
    }
    manager.save(`src/models/${id.toString()}.nlp`);
    res.status(200).send({
        'message': 'Correctly added'
    });
});

router.post('/add-faq-answers', async (req, res) => {
    const {id} = req.body;
    const {possibleAnswers} = req.body;
    const {intent} = req.body;
    let manager = new NlpManager();
    manager.load(`src/models/${id.toString()}.nlp`);
    for (let i = 0; i < possibleAnswers.length; i++) {
        manager.addAnswer('es', intent, possibleAnswers[i]);
    }
    manager.save(`src/models/${id.toString()}.nlp`);
    res.status(200).send({
        'message': 'Correctly answers added'
    });
});

router.post('/train', async (req, res) => {
    const {id} = req.body;
    let manager = new NlpManager();
    manager.load(`src/models/${id.toString()}.nlp`);
    try {
        await manager.train();
        manager.save(`src/models/${id.toString()}.nlp`);
        res.status(200).send({
            'message': 'Successful trained'
        });
    } catch (error) {
        res.status(500).send({
            'message': 'Something went wrong'
        });
    }

});


router.post('/text-input', async (req, res) => {
    const {message} = req.body;
    let {code} = req.body;
    const {id} = req.body;
    let data = {};
    if (!code) {
        code = uuid();
    }

    // Create a new session
    const sessionClient = new Dialogflow.SessionsClient({
        keyFilename: Path.join(__dirname, "../keys/chatbot-uadb-58adc8bbba26.json"),
    });
    const sessionPath = sessionClient.projectAgentSessionPath(
        process.env.PROJECT_ID,
        code
    );
    // The dialogflow request object
    const request = {
        session: sessionPath,
        queryInput: {
            text: {
                // The query to send to the dialogflow agent
                text: message,
                // The language used by the client (en-US)
                languageCode: 'es',
            },
        },
    };

    // Sends data from the agent as a response
    try {
        const responses = await sessionClient.detectIntent(request);
        if (responses[0].queryResult.intent.displayName === "get.phone") {
            const param = responses[0].queryResult.outputContexts[3].parameters.fields
            const LeadDta = {
                _state: "lead",
                email: param.email.stringValue,
                name: param.name.stringValue,
                origin: "Chat",
                phone: param.phoneNumber.stringValue,
                project: id,
                referrer: "test"
            }
            await axios.post('https://api.pimex.io/v2/conversions/', LeadDta);
        }
        // responses[0].code = code;
        const messageResponse = responses[0].queryResult.fulfillmentMessages.map(data => {
            return data.text.text[0]
        });
        data = {
            'messages': messageResponse,
            'code': code
        }
        if (responses[0].queryResult.action === 'input.unknown') {
            let manager = new NlpManager();
            manager.load(`src/models/${id.toString()}.nlp`);

            const nlpResponse = await manager.process('es', message);
            data = {
                'messages': [nlpResponse.answer],
                'code': code
            }
        }
        res.status(200).send(data);
    } catch (e) {
        console.log(e);
        res.status(422).send({e});
    }

})

/*router.post('/chatterbot', ((req, res) => {
    const param = req.body.queryResult.outputContexts[3].parameters.fields
    const data = {
        _state: "lead",
        email: param.email.stringValue,
        name: param.name.stringValue,
        origin: "Chat",
        phone: param.phone_number.stringValue,
        project: gId,
        referrer: "test"
    }
    axios.post('https://api.pimex.io/v2/conversions/', data).then(r => {
        let response = ''
        if (r.data.data.event === 'created'){
            response = 'Se ha creado el lead'
        } else {
            response = 'Error'
        }
        res.json({
            "fulfillmentMessages": [
                {
                    "text": {
                        "text": [
                            response
                        ]
                    }
                }
            ]
        })
    })
}))*/
module.exports = router;
